scalar Point
scalar DateTime
scalar PointInput

type UserSecond {
  userId: ID!
  name: String
  email: String
  phone: String
  Project: Project @relationship(type: "OWNED_BY", direction: IN)
  Experiment: Experiment @relationship(type: "OWNED_BY", direction: IN)
  Sample: Sample @relationship(type: "OWNED_BY", direction: IN)
  ClinicalInfo: ClinicalInfo @relationship(type: "OWNED_BY", direction: IN)
}

type Project {
  projectId: ID
  name: String
  status: String
  dataEmbargoStatus: String
  UserSecond: UserSecond @relationship(type: "OWNED_BY", direction: OUT)
  Sample: Sample @relationship(type: "INCLUDES", direction: OUT)
}


type Sample {
  sampleID: ID!
  name: String
  gender: String
  age: Int
  # rawSequencingData: ObjectId
  # processedDataOnHG19: ObjectId
  # processedDataOnHG38: ObjectId
  Project: Project @relationship(type: "INCLUDES", direction: IN)
  UserSecond: UserSecond @relationship(type: "OWNED_BY", direction: OUT)
  Experiment: Experiment @relationship(type: "INCLUDES", direction: OUT)
  ClinicalInfo: ClinicalInfo @relationship(type: "INCLUDES", direction: OUT)
  QualityControl: QualityControl @relationship(type: "INCLUDES", direction: OUT)
  
}

type Experiment {
  experimentID: ID!
  name: String
  componentPrep: String
  medipWashes: String
  pcr: String
  sequencing: String
  Sample: Sample @relationship(type: "INCLUDES", direction: IN)
  UserSecond: UserSecond @relationship(type: "OWNED_BY", direction: OUT)
}

type QualityControl {
  qcid: ID!
  # alignmentMetrics: ObjectId
  # libraryComplexity
  # signalEnrichment
  Sample: Sample @relationship(type: "INCLUDES", direction: IN)
}

type ClinicalInfo {
  clinicalInfoID: ID!
  tumourType: String
  tumourSubtype: String
  tumourStage: String
  treatment: String
  Sample: Sample @relationship(type: "INCLUDES", direction: IN)
  UserSecond: UserSecond @relationship(type: "OWNED_BY", direction: OUT)
  TumourType: TumourType @relationship(type: "HAS", direction: OUT)
}

type TumourType {
  oncotreeCode: String
  ClinicalInfo: ClinicalInfo @relationship(type: "HAS", direction: IN)
}

type User {
  userId: ID!
  name: String
  reviews: [Review] @relationship(type: "WROTE", direction: OUT)
  avgStars: Float
    @cypher(
      statement: "MATCH (this)-[:WROTE]->(r:Review) RETURN toFloat(avg(r.stars))"
    )
  numReviews: Int
    @cypher(statement: "MATCH (this)-[:WROTE]->(r:Review) RETURN COUNT(r)")
  recommendations(first: Int = 3): [Business]
    @cypher(
      statement: "MATCH (this)-[:WROTE]->(r:Review)-[:REVIEWS]->(:Business)<-[:REVIEWS]-(:Review)<-[:WROTE]-(:User)-[:WROTE]->(:Review)-[:REVIEWS]->(rec:Business) WHERE NOT EXISTS( (this)-[:WROTE]->(:Review)-[:REVIEWS]->(rec) ) WITH rec, COUNT(*) AS num ORDER BY num DESC LIMIT $first RETURN rec"
    )
}

type Business {
  businessId: ID!
  name: String!
  address: String
  city: String
  state: String
  location: Point
  avgStars: Float
    @cypher(
      statement: "MATCH (this)<-[:REVIEWS]-(r:Review) RETURN coalesce(avg(r.stars),0.0)"
    )
  reviews: [Review] @relationship(type: "REVIEWS", direction: IN)
  categories: [Category] @relationship(type: "IN_CATEGORY", direction: OUT)
}

type Review {
  reviewId: ID!
  stars: Float
  text: String
  date: DateTime
  business: Business @relationship(type: "REVIEWS", direction: OUT)
  user: User @relationship(type: "WROTE", direction: IN)
}

type Category {
  name: ID!
  businesses: [Business] @relationship(type: "IN_CATEGORY", direction: IN)
}

type RatingCount @exclude {
  stars: Float!
  count: Int!
}

type Mutation {
  mergeBusinessCategory(categories: [String!]!, businessId: ID!): Business
    @cypher(
      statement: "MATCH (b:Business {businessId: $businessId}) UNWIND $categories AS cat MERGE (c:Category {name: cat}) MERGE (b)-[:IN_CATEGORY]->(c) RETURN b"
    )
  mergeUser(name: String!, userId: ID!): User
    @cypher(
      statement: """
      MERGE (u:User {userId: $userId})
      ON CREATE SET u.name = $name
      RETURN u
      """
    )
  mergeBusiness(
    businessId: ID!
    name: String!
    address: String!
    city: String!
    state: String!
    latitude: Float!
    longitude: Float!
  ): Business
    @cypher(
      statement: """
      MERGE (b:Business {businessId: $businessId})
      ON CREATE SET b.name = $name,
                    b.address = $address,
                    b.city = $city,
                    b.state = $state,
                    b.location = Point({latitude: $latitude, longitude: $longitude})
      RETURN b
      """
    )
}

type Query {
  userCount: Int! @cypher(statement: "MATCH (u:User) RETURN COUNT(u)")
  ratingsCount: [RatingCount]
    @cypher(
      statement: "MATCH (r:Review) WITH r.stars AS stars, COUNT(*) AS count ORDER BY stars RETURN {stars: stars, count: count}"
    )
  projectCount: Int @cypher(statement: "MATCH (p:Project) RETURN COUNT(p)")
  projectName: String @cypher(statement: "MATCH (p:Project) RETURN p.name")
  projectList: [Project] @cypher(statement: "MATCH (p:Project) WITH p.name AS name RETURN {name: name}")
}
